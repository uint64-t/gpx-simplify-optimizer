function updateLayers(){$(".leaflet-control-switcher").html("");for(var a in window.Layers){var b=window.Layers[a];$(".leaflet-control-switcher").append('<option value="'+b.id+'" '+(window.currentLayer.name==b.name?' selected="selected"':"")+">"+b.name+"</option>")}Object.keys(window.Layers).length>0?$(".leaflet-control-switcher-box").show():$(".leaflet-control-switcher-box").hide()}function clearMap(){for(var a in window.Layers)window.Layers[a].remove();window.Layers={},updateLayers()}function isValidCoordinate(a){return a&&(2===a.length||3===a.length)&&!isNaN(a[0])&&!isNaN(a[1])&&isFinite(a[0])&&isFinite(a[1])}function isValidCoordinateForSimplification(a){return a&&(2===a.length||3===a.length)&&"number"==typeof a[0]&&"number"==typeof a[1]&&!isNaN(a[0])&&!isNaN(a[1])&&isFinite(a[0])&&isFinite(a[1])}var LayerOptimizer=function(a){this.id=this.createId(),this.name=a.filename,this.sourceLayer=a.layer,this.size=a.layer.getLayers().length,this.sourceLayerStyle={color:"red",opacity:.7,fillOpacity:.7,weight:5,clickable:!1},this.sourceLayerData=[],this.sourceLayerJSON=[],this.sourceLayerOptions=[],this.sourceLayerNodes=0,this.simplifiedLayerStyle={color:"blue",opacity:1,fillOpacity:1,weight:2,clickable:!1},this.simplifiedLayerData=[],this.simplifiedLayerNodes=0,this.controller=null,this.tolerance=0,"undefined"==typeof RAW_DATA&&(window.RAW_DATA={}),this.rawData=JSON.parse(JSON.stringify(RAW_DATA)),RAW_DATA={},"function"==typeof this.init?this.init():console.error("LayerOptimizer.prototype.init is not defined")};LayerOptimizer.prototype={init:function(){for(var a,b=[],c=0;c<this.size;c++)if(a=this.sourceLayer.getLayers()[c].toGeoJSON(),"GeometryCollection"===a.geometry.type)for(var d=0;d<a.geometry.geometries.length;d++){var e=JSON.parse(JSON.stringify(a));e.geometry=a.geometry.geometries[d],e.properties.name=a.properties.name+" #"+d,e.geometry.coordinates=e.geometry.coordinates[0],b.push(e)}else b.push(a);this.size=b.length;for(var f=0;f<this.size;f++)this.initLayer(b[f],f)},initLayer:function(a,b){if(this.sourceLayerOptions[b]={},console.log("Processing layer",b,"Type:",a.geometry.type,"Coords structure:",a.geometry.coordinates),"LineString"!==a.geometry.type){this.sourceLayerOptions[b].type=a.geometry.type;var c=a.geometry.coordinates,d=c;try{if("Point"===a.geometry.type?(console.log("Skipping Point geometry - cannot convert to LineString"),this.sourceLayerJSON[b]=a):"Polygon"===a.geometry.type?c=c[0]:"MultiPolygon"===a.geometry.type?c=c.reduce(function(a,b){return a.concat(b[0])},[]):"MultiLineString"===a.geometry.type&&(c=c.reduce(function(a,b){return a.concat(b)},[])),console.log("Coords after conversion:",c),console.log("Coords length:",c.length),console.log("First coord:",c[0]),c&&c.length>0&&"number"==typeof c[0]&&(c=[c]),console.log("Final coords structure:",c),console.log("First coord validation test:",c[0],"isValid:",isValidCoordinate(c[0])),c[0]&&c[0].length>0&&(console.log("First coord types:",typeof c[0][0],typeof c[0][1],typeof c[0][2]),console.log("First coord values:",c[0][0],c[0][1],c[0][2])),c=c.filter(isValidCoordinate),console.log("Filtered coords:",c),c.length>=2){var e={type:"Feature",properties:a.properties,geometry:{type:"LineString",coordinates:c}};this.sourceLayerJSON[b]=e,console.log("Successfully converted",a.geometry.type,"to LineString with",c.length,"coordinates")}else console.warn("Failed to convert geometry to LineString, using original. Original coords:",d.length,"Valid coords:",c.length),this.sourceLayerJSON[b]=a}catch(f){console.error("Error converting geometry:",f,"Original:",a.geometry.type,"Coords:",d),this.sourceLayerJSON[b]=a}}else this.sourceLayerJSON[b]=a;this.sourceLayerData[b]=L.geoJson(null,{style:this.sourceLayerStyle}).addTo(window.map),this.sourceLayerData[b].addData(a),this.sourceLayerNodes+=a.geometry.coordinates.length,this.simplifiedLayerNodes+=a.geometry.coordinates.length;try{this.simplifiedLayerData[b]=L.geoJson(null,{style:this.simplifiedLayerStyle}).addTo(window.map),this.simplifiedLayerData[b].addData(this.sourceLayerJSON[b])}catch(f){console.error("Error creating simplified layer:",f,"Layer:",this.sourceLayerJSON[b]),this.simplifiedLayerData[b]=L.geoJson(a,{style:this.simplifiedLayerStyle}).addTo(window.map)}},choose:function(){this.zoom(),this.createLayerGroup(),this.displayInfos(),this.displaySizeFormats(),$("#slider").slider("setValue",this.tolerance)},optimize:function(a){this.simplifiedLayerNodes=0;for(var b,c,d=0;d<this.size;d++)try{var e=this.sourceLayerJSON[d].geometry.coordinates;if(!e||!Array.isArray(e)||0===e.length){console.warn("Invalid coordinates for layer",d,":",e);continue}var f=e.filter(isValidCoordinateForSimplification);if(f.length<2){console.warn("Not enough valid coordinates for layer",d,":",f.length);continue}b=simplifyGeometry(f,a);var g=this.simplifiedLayerData[d].getLayers();if(!g||0===g.length){console.warn("No layers found for simplified data",d);continue}if(c=g[0].toGeoJSON(),1===b.length&&void 0===b[0]&&(b=[]),b=b.filter(isValidCoordinate),0===b.length){console.warn("No valid coordinates after simplification for layer",d);continue}c.geometry.coordinates=b,this.simplifiedLayerData[d].clearLayers(),this.simplifiedLayerData[d].addData(c),this.simplifiedLayerNodes+=b.length}catch(h){console.error("Error optimizing layer",d,":",h);continue}this.displaySizeFormats(),this.tolerance=a},getBounds:function(){return this.sourceLayer.getBounds()},zoom:function(){window.map.fitBounds(this.getBounds())},createLayerGroup:function(){for(var a,b={},c=0;c<this.size;c++)this.sourceLayerData[c]&&this.simplifiedLayerData[c]?(a=this.sourceLayerJSON[c].properties&&this.sourceLayerJSON[c].properties.name?this.sourceLayerJSON[c].properties.name:this.name+" - "+$.t("layers.track")+" "+c,b[$.t("layers.simplified")]=this.simplifiedLayerData[c],b[$.t("layers.source")]=this.sourceLayerData[c]):console.warn("Skipping layer",c,"- missing layer data");Object.keys(b).length>0?(this.controller=L.control.layers(null,b,{collapsed:!1}),this.controller.addTo(window.map),$(".leaflet-control-layers-selector").on("click",function(){window.currentLayer.displaySizeFormats()})):console.warn("No valid layers to display")},displayInfos:function(){var a=$.t("layers.infos.title",{name:this.name}),b=$.t("layers.infos.nodes",{sourcenodes:this.sourceLayerNodes,simplifiednodes:this.simplifiedLayerNodes});$("#filename").html(a),$("#nodes").html(b),$(".leaflet-control-stats").show()},countTracksNodes:function(a){a=a||this.simplifiedLayerData;for(var b=0,c=0,d=0;d<this.size;d++)layer=a[d].getLayers()[0],window.map.hasLayer(layer)&&(b++,c+=layer.toGeoJSON().geometry.coordinates.length);return{tracks:b,nodes:c}},displaySizeFormats:function(){var a=this.countTracksNodes(),b=this.countTracksNodes(this.sourceLayerData),c=window.formats.formats,d="",e=0;$("#size-format .sizes").html(""),e=c[0].getSize(b.tracks,b.nodes,this.rawData),d="Original",$("#size-format .sizes").append('<p><span class="format-name">'+d+' :</span><span class="format-size">'+e+"</span></p>");for(var f=0;f<c.length;f++)e=c[f].getSize(a.tracks,a.nodes,this.rawData),$("#size-format .sizes").append('<p><span class="format-name">'+c[f].param.name+' :</span><span class="format-size">'+e+"</span></p>");$("#size-format").show()},clearInfos:function(){$("#filename").html(""),$("#nodes").html(""),$(".leaflet-control-stats").hide()},clearSizeFormats:function(){$("#size-format").hide()},remove:function(){this.removeLayers(),this.removeController(),this.clearInfos(),this.clearSizeFormats()},removeLayers:function(){for(var a=0;a<this.size;a++){try{window.map.removeLayer(this.sourceLayerData[a])}catch(b){console.log($.t("layers.error.layer"))}try{window.map.removeLayer(this.simplifiedLayerData[a])}catch(b){console.log($.t("layers.error.layer"))}}},removeController:function(){try{void 0!==this.controller._map&&this.controller.removeFrom(window.map)}catch(a){console.log($.t("layers.error.controller"))}},createId:function(){function a(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return a()+a()+a()+a()}};